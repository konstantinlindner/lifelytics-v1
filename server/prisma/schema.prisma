// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Widget {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
}

// users and roles

model User {
  id                            String                @id @default(cuid())
  created_at                    DateTime              @default(now())
  updated_at                    DateTime              @updatedAt
  email                         String                @unique
  email_verified_at             DateTime?
  phone                         String?               @unique
  birth_date                    DateTime              @db.Date
  // password_salt                 String
  // password_hashed               String
  first_name                    String
  last_name                     String
  image                         String?
  bio                           String?
  website                       String?
  banned                        Boolean
  flagged                       Boolean
  flagged_message               String?
  // last_login_at                 DateTime              @db.Timestamptz() // does something need to go inside brackets?
  // add last login_ip
  // add all_known_ips                 
  failed_login_attempts         Int?
  role                          Role                  @relation(fields: [role_id], references: [id])
  role_id                       String
  // location                      String // look at this one
  // add  cities_visited
  // add  selected_currencies
  transactions                  Transaction[]
  transaction_items_created     TransactionItem[]
  payment_methods_created       PaymentMethod[]
  flight_trips                  FlightTrip[]
  airlines_created              Airline[]
  airline_alliances_created     AirlineAlliance[]
  accommodations                Accommodation[]
  accommodation_places_created  AccommodationPlace[]
  accommodation_types_created   AccommodationType[]
  transportations               Transportation[]
  transportation_types_created  TransportationType[]
  meals                         Meal[]
  meal_places_created           MealPlace[]
  meal_place_types_created      MealPlaceType[]
  meal_categories_created       MealCategory[]
  currencies_created            Currency[]
  territories_created           Territory[]
  cities_created                City[]
  airports_created              Airport[]
  vaccines_created              Vaccine[]
  diseases_created              Disease[]
  disease_types_created         DiseaseType[]
  vaccine_manufacturers_created VaccineManufacturer[]
  transaction_places            TransactionPlace[]
  ip_adresses                   IpAddress             @relation(fields: [ip_addresses_ids], references: [id])
  ip_addresses_ids              String[]
  region                        Region?               @relation(fields: [region_id], references: [id])
  region_id                     String
}

model Role {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model IpAddress {
  id          String  @id @default(cuid())
  ip_address  String  @unique
  blacklisted Boolean
  users       User[]
}

// economics

model Transaction {
  id                 String                   @id @default(cuid())
  owner              User                     @relation(fields: [owner_id], references: [id])
  owner_id           String
  personal_note      String
  created_at         DateTime                 @default(now())
  updated_at         DateTime                 @updatedAt
  transaction_date   DateTime                 @db.Date
  amount             Decimal                  @db.Decimal() // should it have brackets?
  currency           Currency                 @relation(fields: [currencyId], references: [id]) // add relation
  split_cost         Int
  // add split_cost_users
  item               TransactionItem          @relation(fields: [transactionItemId], references: [id])
  place              TransactionPlace         @relation(fields: [transactionPlaceId], references: [id])
  sub_category       TransactionSubCategory[]
  payment_method     PaymentMethod            @relation(fields: [payment_method_id], references: [id])
  payment_method_id  String
  currencyId         String
  transactionItemId  String
  transactionPlaceId String
  FlightTrip         FlightTrip[]
  Accommodation      Accommodation[]
  Transportation     Transportation[]
  Meal               Meal[]
}

model TransactionCategory {
  id                       String                  @id @default(cuid())
  name                     String                  @unique
  emoji                    String
  TransactionSubCategory   TransactionSubCategory? @relation(fields: [transactionSubCategoryId], references: [id])
  transactionSubCategoryId String?
}

model TransactionSubCategory {
  id                   String                @id @default(cuid())
  name                 String                @unique
  transaction_category TransactionCategory[]
  Transaction          Transaction?          @relation(fields: [transactionId], references: [id])
  transactionId        String?
  TransactionPlace     TransactionPlace?     @relation(fields: [transactionPlaceId], references: [id])
  transactionPlaceId   String?
}

model TransactionPlace {
  id                       String                   @id @default(cuid())
  name                     String
  created_by               User                     @relation(fields: [created_by_id], references: [id])
  created_by_id            String
  global                   Boolean
  flagged                  Boolean
  flagged_message          String
  transaction_sub_category TransactionSubCategory[]
  Transaction              Transaction[]
  TransactionItem          TransactionItem?         @relation(fields: [transactionItemId], references: [id])
  transactionItemId        String?
  MealPlace                MealPlace[]
}

model TransactionItem {
  id                String             @id @default(cuid())
  name              String
  created_by        User               @relation(fields: [created_by_id], references: [id])
  created_by_id     String
  global            Boolean
  flagged           Boolean
  flagged_message   String
  transaction_place TransactionPlace[]
  transactions      Transaction[]
}

model PaymentMethod {
  id                               String            @id @default(cuid())
  type                             PaymentMethodType @relation(fields: [paymentMethodTypeId], references: [id])
  issuer                           String
  name                             String            @unique
  currency                         Currency          @relation(fields: [currencyId], references: [id])
  foreign_currency_conversion_rate Decimal           @db.Decimal()
  created_by                       User              @relation(fields: [created_by_id], references: [id])
  created_by_id                    String
  global                           Boolean
  Transaction                      Transaction[]
  paymentMethodTypeId              String
  currencyId                       String
}

model PaymentMethodType {
  id            String          @id @default(cuid())
  name          String
  PaymentMethod PaymentMethod[]
}

// flights

model FlightTrip {
  id              String             @id @default(cuid())
  name            String
  // add departure_airport
  arrival_airport Airport            @relation(fields: [airportId], references: [id])
  flights         IndividualFlight[]
  transaction     Transaction        @relation(fields: [transactionId], references: [id])
  owner           User               @relation(fields: [owner_id], references: [id])
  owner_id        String
  airportId       String
  transactionId   String
}

model IndividualFlight {
  id              String     @id @default(cuid())
  trip            FlightTrip @relation(fields: [trip_id], references: [id])
  trip_id         String
  departure_time  DateTime   @db.Timestamptz()
  arrival_time    DateTime   @db.Timestamptz()
  airline         Airline    @relation(fields: [airlineId], references: [id])
  // add departure_airport 
  arrival_airport Airport    @relation(fields: [airportId], references: [id])
  flight_number   String
  seat            String
  order           Int
  airlineId       String
  airportId       String
}

model Airline {
  created_by        User               @relation(fields: [created_by_id], references: [id])
  created_by_id     String
  global            Boolean
  id                String             @id @default(cuid())
  airline           String
  alliance          AirlineAlliance    @relation(fields: [airlineAllianceId], references: [id])
  territory_reg     Territory          @relation(fields: [territory_reg_id], references: [id])
  territory_reg_id  String
  flagged           Boolean
  flagged_message   String
  IndividualFlight  IndividualFlight[]
  airlineAllianceId String
}

model AirlineAlliance {
  created_by      User      @relation(fields: [created_by_id], references: [id])
  created_by_id   String
  global          Boolean
  id              String    @id @default(cuid())
  alliance        String
  flagged         Boolean
  flagged_message String
  Airline         Airline[]
}

// accommodation

model Accommodation {
  id                   String             @id @default(cuid())
  created_at           DateTime           @db.Timestamptz()
  name                 AccommodationPlace @relation(fields: [accommodationPlaceId], references: [id])
  type                 AccommodationType  @relation(fields: [accommodationTypeId], references: [id])
  check_in             DateTime           @db.Date
  check_out            DateTime           @db.Date
  owner                User               @relation(fields: [owner_id], references: [id])
  owner_id             String
  transaction          Transaction        @relation(fields: [transactionId], references: [id])
  accommodationPlaceId String
  accommodationTypeId  String
  transactionId        String
}

model AccommodationPlace {
  id                  String            @id @default(cuid())
  type                AccommodationType @relation(fields: [accommodationTypeId], references: [id])
  city                City              @relation(fields: [cityId], references: [id])
  name                String
  created_by          User              @relation(fields: [created_by_id], references: [id])
  created_by_id       String
  global              Boolean
  Accommodation       Accommodation[]
  accommodationTypeId String
  cityId              String
}

model AccommodationType {
  id                 String               @id @default(cuid())
  name               String
  created_by         User                 @relation(fields: [created_by_id], references: [id])
  created_by_id      String
  global             Boolean
  Accommodation      Accommodation[]
  AccommodationPlace AccommodationPlace[]
}

// Transportation

model Transportation {
  id                   String             @id @default(cuid())
  created_at           DateTime           @db.Timestamptz()
  from                 String
  to                   String
  date                 DateTime           @db.Date
  type                 TransportationType @relation(fields: [transportationTypeId], references: [id])
  owner                User               @relation(fields: [owner_id], references: [id])
  owner_id             String
  transaction          Transaction        @relation(fields: [transactionId], references: [id])
  transportationTypeId String
  transactionId        String
}

model TransportationType {
  id             String           @id @default(cuid())
  name           String
  created_by     User             @relation(fields: [created_by_id], references: [id])
  created_by_id  String
  global         Boolean
  Transportation Transportation[]
}

// meals

model Meal {
  id             String       @id @default(cuid())
  created_at     DateTime     @default(now())
  date           DateTime     @db.Date
  owner          User         @relation(fields: [owner_id], references: [id])
  owner_id       String
  from           MealPlace    @relation(fields: [mealPlaceId], references: [id])
  category       MealCategory @relation(fields: [mealCategoryId], references: [id])
  transaction    Transaction  @relation(fields: [transactionId], references: [id])
  eat_in         Boolean
  leftovers      Boolean
  delivery       Boolean
  shared_meal    Boolean
  mealPlaceId    String
  mealCategoryId String
  transactionId  String
}

model MealCategory {
  id            String     @id @default(cuid())
  name          String
  created_by    User       @relation(fields: [created_by_id], references: [id])
  created_by_id String
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  global        Boolean
  Meal          Meal[]
  MealPlace     MealPlace? @relation(fields: [mealPlaceId], references: [id])
  mealPlaceId   String?
}

model MealPlace {
  id                 String           @id @default(cuid())
  name               TransactionPlace @relation(fields: [transactionPlaceId], references: [id])
  created_by         User             @relation(fields: [created_by_id], references: [id])
  created_by_id      String
  global             Boolean
  type               MealPlaceType    @relation(fields: [type_id], references: [id])
  type_id            String
  default_categories MealCategory[]
  Meal               Meal[]
  transactionPlaceId String
}

model MealPlaceType {
  id            String      @id @default(cuid())
  name          String
  created_by    User        @relation(fields: [created_by_id], references: [id])
  created_by_id String
  global        Boolean
  MealPlace     MealPlace[]
}

// other

model Currency {
  created_by      User            @relation(fields: [created_by_id], references: [id])
  created_by_id   String
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  global          Boolean
  id              String          @id @default(cuid())
  name            String
  ticker          String
  // territories 
  flagged         Boolean
  flagged_message String
  Transaction     Transaction[]
  PaymentMethod   PaymentMethod[]
}

model Continent {
  id      String   @id @default(cuid())
  name    String   @unique
  regions Region[]
}

model Region {
  id            String      @id @default(cuid())
  name          String
  continent     Continent   @relation(fields: [continent_id], references: [id])
  continent_id  String
  users_visited User[]
  territories   Territory[]
}

model Territory {
  created_by      User      @relation(fields: [created_by_id], references: [id])
  created_by_id   String
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  global          Boolean
  id              String    @id @default(cuid())
  name            String    @unique
  name_local      String    @unique
  name_formal     String    @unique
  emoji           String    @unique
  flagged         Boolean
  flagged_message String
  cities          City[]
  region          Region    @relation(fields: [region_id], references: [id])
  region_id       String
  Airline         Airline[]
  Language        Language? @relation(fields: [languageId], references: [id])
  languageId      String?
}

model TerritoryType {
  id   String @id @default(cuid())
  name String
}

model City {
  created_by         User                 @relation(fields: [created_by_id], references: [id])
  created_by_id      String
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  flagged            Boolean
  flagged_message    String
  global             Boolean
  id                 String               @id @default(cuid())
  name_english       String
  name_local         String
  type               CityType             @relation(fields: [type_id], references: [id])
  type_id            String
  territory          Territory            @relation(fields: [territory_id], references: [id])
  territory_id       String
  // add users_visited
  airports           Airport[]
  airport_id         String
  AccommodationPlace AccommodationPlace[]
}

model CityType {
  id   String @id @default(cuid())
  name String
  City City[]
}

model Language {
  id           String      @id @default(cuid())
  name_english String
  name_local   String
  territories  Territory[]
}

model Airport {
  created_by       User               @relation(fields: [created_by_id], references: [id])
  created_by_id    String
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  flagged          Boolean
  flagged_message  String
  global           Boolean
  id               String             @id @default(cuid())
  name             String
  iata             String
  icao             String
  city             City               @relation(fields: [city_id], references: [id])
  city_id          String
  FlightTrip       FlightTrip[]
  IndividualFlight IndividualFlight[]
  cityId           String
}

// vaccines

model Vaccine {
  id                    String              @id @default(cuid())
  name                  String
  manufacturer          VaccineManufacturer @relation(fields: [vaccineManufacturerId], references: [id])
  diseases_targeted     Disease[]
  created_by            User                @relation(fields: [created_by_id], references: [id])
  created_by_id         String
  vaccineManufacturerId String
}

model Disease {
  id            String      @id @default(cuid())
  name          String
  type          DiseaseType @relation(fields: [diseaseTypeId], references: [id]) // add relation
  created_by    User        @relation(fields: [created_by_id], references: [id])
  created_by_id String
  Vaccine       Vaccine?    @relation(fields: [vaccineId], references: [id])
  vaccineId     String?
  diseaseTypeId String
}

model DiseaseType {
  id            String    @id @default(cuid())
  name          String
  created_by    User      @relation(fields: [created_by_id], references: [id])
  created_by_id String
  Disease       Disease[]
}

model VaccineManufacturer {
  id            String    @id @default(cuid())
  name          String
  created_by    User      @relation(fields: [created_by_id], references: [id])
  created_by_id String
  Vaccine       Vaccine[]
}

// library

// notion

// health
